name: Version Reusable Workflow
on:
  workflow_call:

jobs:
  create-new-version:
    runs-on: ubuntu-latest
    steps:
      - name: Fetching Local Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get revision name
        id: get-name
        uses: paulhatch/semantic-version@v5.0.3
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Named version, will be used as suffix for name version tag
          # namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.get-name.outputs.version_tag }}
          commit: ${{ github.sha }}
          tag: ${{ steps.get-name.outputs.version_tag }}

      - name: Update Major Version
        id: update-major-version
        run: |
            echo "Parsing the v and the next number beside"
            major_version=$(echo $semantic_version | cut -d . -f1)
            echo "Getting release status"
            release_status=$(curl -sL -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/releases | jq -r '.[] | select(.tag_name=="'"${major_version}"'")')
            echo ${release_status}
            echo "Checking if Major Version exist"
            if [[ ${release_status} == "" ]]; then
              echo "Major Version ${major_version} does not exist. Creating Major Version"
              gh release create ${major_version}
            else
              echo "Major Version ${major_version} already exists"
              echo "Removing Current Major Release & Tag"
              gh release delete $major_version --cleanup-tag
              echo "Replacing Current Major Version"
              gh release create $major_version --target ${{ github.sha }} --generate-notes --latest
            fi
        env:
          semantic_version: ${{ steps.get-name.outputs.version_tag }}
          GH_TOKEN: ${{ github.token }}